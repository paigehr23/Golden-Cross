//+------------------------------------------------------------------+
//|                   Golden Cross EA with Short-Selling            |
//|            Executes trades at Golden Cross & Death Cross        |
//+------------------------------------------------------------------+
#include <Trade/Trade.mqh>

CTrade trade;

// Input parameters
input int Fast_MA_Period = 50;
input int Slow_MA_Period = 200;
input ENUM_MA_METHOD MA_Method = MODE_SMA;
input ENUM_TIMEFRAMES Timeframe = PERIOD_M15;
input double Lot_Size = 0.1;
input double Stop_Loss_USD = 700;  // Stop loss in USD
input double Take_Profit_USD = 3500; // Take profit in USD
input int Shift_Bars = 1;
input double Trailing_Stop_USD = 200; // Trailing stop in USD
input bool Allow_Hedging = false;

// Global variables
int fast_ma_handle, slow_ma_handle;
double fast_ma_values[5], slow_ma_values[5];
static datetime lastBarTime = 0;
bool isLongPosition = false;
bool isShortPosition = false;
static uint last_modification_time = 0;

//+------------------------------------------------------------------+
//| Function to translate error codes to descriptions                |
//+------------------------------------------------------------------+
string ErrorDescription(int error_code)
{
    string error_string;
    
    switch(error_code)
    {
        case 0:     error_string = "No error"; break;
        case 4107:  error_string = "Invalid price"; break;
        case 4108:  error_string = "Invalid stop loss"; break;
        case 4109:  error_string = "Invalid take profit"; break;
        case 4110:  error_string = "Invalid volume"; break;
        case 4111:  error_string = "Invalid trade parameters"; break;
        case 4200:  error_string = "Order already exists"; break;
        case 4756:  error_string = "Invalid modification parameters"; break;
        case 10009: error_string = "Not enough money"; break;
        case 10016: error_string = "Invalid stops"; break;
        default:    error_string = "Unknown error"; 
    }
    
    return error_string;
}

//+------------------------------------------------------------------+
//| Expert initialization function                                  |
//+------------------------------------------------------------------+
int OnInit()
{
    fast_ma_handle = iMA(_Symbol, Timeframe, Fast_MA_Period, 0, MA_Method, PRICE_CLOSE);
    slow_ma_handle = iMA(_Symbol, Timeframe, Slow_MA_Period, 0, MA_Method, PRICE_CLOSE);

    if (fast_ma_handle == INVALID_HANDLE || slow_ma_handle == INVALID_HANDLE)
    {
        Print("Failed to create indicator handles");
        return INIT_FAILED;
    }
    
    // Initialize position status based on existing positions
    UpdatePositionStatus();
    Print("Initial position status - Long: ", isLongPosition, " Short: ", isShortPosition);
    
    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    if (fast_ma_handle != INVALID_HANDLE)
        IndicatorRelease(fast_ma_handle);
    if (slow_ma_handle != INVALID_HANDLE)
        IndicatorRelease(slow_ma_handle);
}

//+------------------------------------------------------------------+
//| Function to check current position status                       |
//+------------------------------------------------------------------+
void UpdatePositionStatus()
{
    isLongPosition = false;
    isShortPosition = false;
    
    for (int i = 0; i < PositionsTotal(); i++)
    {
        ulong ticket = PositionGetTicket(i);
        if (ticket > 0 && PositionGetString(POSITION_SYMBOL) == _Symbol)
        {
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
            {
                isLongPosition = true;
                Print("Found existing long position: ", ticket);
            }
            else if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
            {
                isShortPosition = true;
                Print("Found existing short position: ", ticket);
            }
        }
    }
    
    Print("Position status updated - Long: ", isLongPosition, " Short: ", isShortPosition);
}

//+------------------------------------------------------------------+
//| Function to close positions of a specific type                  |
//+------------------------------------------------------------------+
void ClosePositions(ENUM_POSITION_TYPE posType)
{
    for (int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if (ticket > 0 && PositionGetString(POSITION_SYMBOL) == _Symbol)
        {
            if (PositionGetInteger(POSITION_TYPE) == posType)
            {
                if (!trade.PositionClose(ticket))
                {
                    Print("Trade closure failed for ticket: ", ticket, 
                          " Error: ", GetLastError(),
                          " Description: ", ErrorDescription(GetLastError()));
                }
                else
                {
                    Print("Successfully closed ", (posType == POSITION_TYPE_BUY ? "LONG" : "SHORT"), " position: ", ticket);
                }
            }
        }
    }
    
    // Update position status after closing positions
    UpdatePositionStatus();
}

//+------------------------------------------------------------------+
//| Calculate USD to points                                         |
//+------------------------------------------------------------------+
double USDToPoints(double usd_amount, double lot_size)
{
    double tick_value = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
    double tick_size = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
    double point_value = tick_value * tick_size / _Point;
    
    // Convert USD to points
    return usd_amount / (point_value * lot_size);
}

//+------------------------------------------------------------------+
//| Function to apply trailing stop                                 |
//+------------------------------------------------------------------+
void ApplyTrailingStop()
{
    double trailing_points = USDToPoints(Trailing_Stop_USD, Lot_Size);
    
    for (int i = 0; i < PositionsTotal(); i++)
    {
        ulong ticket = PositionGetTicket(i);
        if (ticket > 0 && PositionGetString(POSITION_SYMBOL) == _Symbol)
        {
            // Check if the trade is still open before attempting to modify
            if (!PositionSelectByTicket(ticket))
                continue;
                
            // Add a delay between modification attempts
            if (GetTickCount() - last_modification_time < 1000)  // 1 second delay
                continue;
            
            double sl = PositionGetDouble(POSITION_SL);
            double tp = PositionGetDouble(POSITION_TP);
            double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
            
            // Get current market prices
            double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            
            // Get minimum stop level in points
            int min_stop_level = (int)SymbolInfoInteger(_Symbol, SYMBOL_TRADE_STOPS_LEVEL);
            
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
            {
                double new_sl = bid - trailing_points * _Point;
                
                // Ensure new SL respects minimum stop level
                double min_allowed_sl = bid - min_stop_level * _Point;
                if (new_sl > min_allowed_sl && new_sl > sl && new_sl > open_price) // Ensure we're in profit
                {
                    if (!trade.PositionModify(ticket, new_sl, tp))
                    {
                        Print("Trailing stop modification failed for ticket: ", ticket, 
                              " Error: ", GetLastError(), 
                              " Description: ", ErrorDescription(GetLastError()),
                              " New SL: ", new_sl, " Bid: ", bid, " Min allowed: ", min_allowed_sl);
                    }
                    else
                    {
                        Print("Trailing stop successfully modified for ticket: ", ticket, " New SL: ", new_sl);
                        last_modification_time = GetTickCount();
                    }
                }
            }
            else if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
            {
                double new_sl = ask + trailing_points * _Point;
                
                // Ensure new SL respects minimum stop level
                double min_allowed_sl = ask + min_stop_level * _Point;
                if (new_sl < min_allowed_sl && (new_sl < sl || sl == 0) && new_sl < open_price) // Ensure we're in profit
                {
                    if (!trade.PositionModify(ticket, new_sl, tp))
                    {
                        Print("Trailing stop modification failed for ticket: ", ticket, 
                              " Error: ", GetLastError(),
                              " Description: ", ErrorDescription(GetLastError()),
                              " New SL: ", new_sl, " Ask: ", ask, " Min allowed: ", min_allowed_sl);
                    }
                    else
                    {
                        Print("Trailing stop successfully modified for ticket: ", ticket, " New SL: ", new_sl);
                        last_modification_time = GetTickCount();
                    }
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Expert tick function                                            |
//+------------------------------------------------------------------+
void OnTick()
{
    // Reset position flags and update at the beginning of each tick
    isLongPosition = false;
    isShortPosition = false;
    UpdatePositionStatus();
    
    // Only execute once per bar
    datetime currentBarTime = iTime(_Symbol, Timeframe, 0);
    if (currentBarTime == lastBarTime) 
    {
        ApplyTrailingStop(); // We still want to apply trailing stops on every tick
        return;
    }
    lastBarTime = currentBarTime;
    
    // Get indicator values
    if (CopyBuffer(fast_ma_handle, 0, 0, 3, fast_ma_values) <= 0 ||
        CopyBuffer(slow_ma_handle, 0, 0, 3, slow_ma_values) <= 0)
    {
        Print("Failed to get indicator data");
        return;
    }
    
    // Get MA values for current and previous bar
    double fast_ma_current = fast_ma_values[0];
    double fast_ma_prev = fast_ma_values[1];
    double slow_ma_current = slow_ma_values[0];
    double slow_ma_prev = slow_ma_values[1];
    
    // Detect crossovers correctly
    bool goldenCross = (fast_ma_prev < slow_ma_prev) && (fast_ma_current >= slow_ma_current);
    bool deathCross = (fast_ma_prev > slow_ma_prev) && (fast_ma_current <= slow_ma_current);
    
    // Debug info
    Print("Prev Fast MA: ", fast_ma_prev, " Prev Slow MA: ", slow_ma_prev);
    Print("Fast MA: ", fast_ma_current, " Slow MA: ", slow_ma_current);
    Print("Golden Cross: ", goldenCross, " Death Cross: ", deathCross);
    
    // If no signal, just return
    if (!goldenCross && !deathCross) return;
    
    // Calculate SL and TP in points
    double sl_points = USDToPoints(Stop_Loss_USD, Lot_Size);
    double tp_points = USDToPoints(Take_Profit_USD, Lot_Size);
    
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    
    // Golden Cross - Buy Signal
    if (goldenCross)
    {
        Print("Golden Cross detected - Buy Signal");
        // Close any short positions
        if (isShortPosition)
        {
            Print("Closing Short positions");
            ClosePositions(POSITION_TYPE_SELL);
        }
        
        Print("isLongPosition status after closing shorts: ", isLongPosition);
        
        // Open a long position if we don't have one already
        if (!isLongPosition)
        {
            double sl = ask - sl_points * _Point;
            double tp = ask + tp_points * _Point;
            
            Print("Opening Long position with SL: ", sl, " TP: ", tp);
            if (!trade.Buy(Lot_Size, _Symbol, 0, sl, tp))
            {
                Print("Buy trade failed. Error code: ", GetLastError(), 
                      " Description: ", ErrorDescription(GetLastError()));
            }
            else
            {
                Print("Successfully opened long position");
                if (trade.ResultRetcode() == TRADE_RETCODE_DONE)
                {
                    Print("Trade executed successfully. Updating position status.");
                    isLongPosition = true;
                    UpdatePositionStatus();
                }
            }
        }
        else
        {
            Print("Not opening long position because isLongPosition = true");
        }
    }
    
    // Death Cross - Sell Signal
    if (deathCross)
    {
        Print("Death Cross detected - Sell Signal");
        // Close any long positions
        if (isLongPosition)
        {
            Print("Closing Long positions");
            ClosePositions(POSITION_TYPE_BUY);
        }
        
        Print("isShortPosition status after closing longs: ", isShortPosition);
        
        // Open a short position if we don't have one already
        if (!isShortPosition)
        {
            double sl = bid + sl_points * _Point;
            double tp = bid - tp_points * _Point;
            
            Print("Opening Short position with SL: ", sl, " TP: ", tp);
            if (!trade.Sell(Lot_Size, _Symbol, 0, sl, tp))
            {
                Print("Sell trade failed. Error code: ", GetLastError(), 
                      " Description: ", ErrorDescription(GetLastError()));
            }
            else
            {
                Print("Successfully opened short position");
                if (trade.ResultRetcode() == TRADE_RETCODE_DONE)
                {
                    Print("Trade executed successfully. Updating position status.");
                    isShortPosition = true;
                    UpdatePositionStatus();
                }
            }
        }
        else
        {
            Print("Not opening short position because isShortPosition = true");
        }
    }
}
